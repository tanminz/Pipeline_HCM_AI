#!/usr/bin/env python3
"""
Script n√©n ·∫£nh si√™u m·∫°nh ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng t·ªëi ƒëa
"""

import os
import sys
from PIL import Image
from pathlib import Path
import time
import shutil

def aggressive_compress_image(input_path, quality=50, max_size=(1280, 720)):
    """N√©n ·∫£nh v·ªõi c√†i ƒë·∫∑t si√™u m·∫°nh"""
    try:
        with Image.open(input_path) as img:
            # Chuy·ªÉn sang RGB
            if img.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # Resize m·∫°nh h∆°n
            if img.width > max_size[0] or img.height > max_size[1]:
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # N√©n v·ªõi ch·∫•t l∆∞·ª£ng th·∫•p
            img.save(input_path, 'JPEG', quality=quality, optimize=True, progressive=True)
            return True
    except Exception as e:
        print(f"Error compressing {input_path}: {e}")
        return False

def cleanup_temp_files():
    """D·ªçn d·∫πp file t·∫°m v√† cache"""
    print("üßπ D·ªçn d·∫πp file t·∫°m...")
    
    # D·ªçn d·∫πp Python cache
    for root, dirs, files in os.walk('.'):
        for dir_name in dirs:
            if dir_name == '__pycache__':
                cache_path = os.path.join(root, dir_name)
                try:
                    shutil.rmtree(cache_path)
                    print(f"‚úÖ X√≥a cache: {cache_path}")
                except:
                    pass
    
    # D·ªçn d·∫πp file log c≈©
    log_files = ['compression.log', 'data_integration.log']
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                os.remove(log_file)
                print(f"‚úÖ X√≥a log: {log_file}")
            except:
                pass

def compress_directory_aggressive(directory, quality=50, max_size=(1280, 720)):
    """N√©n th∆∞ m·ª•c v·ªõi c√†i ƒë·∫∑t si√™u m·∫°nh"""
    directory = Path(directory)
    if not directory.exists():
        print(f"Directory not found: {directory}")
        return
    
    # T√¨m t·∫•t c·∫£ file ·∫£nh
    image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff'}
    image_files = []
    
    for ext in image_extensions:
        image_files.extend(directory.rglob(f"*{ext}"))
        image_files.extend(directory.rglob(f"*{ext.upper()}"))
    
    print(f"Found {len(image_files)} image files")
    
    if not image_files:
        print("No image files found")
        return
    
    # T√≠nh dung l∆∞·ª£ng ban ƒë·∫ßu
    total_size_before = sum(f.stat().st_size for f in image_files)
    print(f"Total size before: {total_size_before / (1024*1024*1024):.2f} GB")
    
    # N√©n t·ª´ng file
    compressed_count = 0
    start_time = time.time()
    
    for i, img_file in enumerate(image_files):
        if i % 1000 == 0:
            print(f"Processing {i}/{len(image_files)} files...")
        
        if aggressive_compress_image(img_file, quality, max_size):
            compressed_count += 1
    
    # T√≠nh dung l∆∞·ª£ng sau
    total_size_after = sum(f.stat().st_size for f in image_files)
    compression_ratio = (1 - total_size_after/total_size_before) * 100
    
    print(f"\nüéØ N√âN SI√äU M·∫†NH HO√ÄN TH√ÄNH!")
    print(f"Compressed: {compressed_count}/{len(image_files)} files")
    print(f"Size before: {total_size_before / (1024*1024*1024):.2f} GB")
    print(f"Size after: {total_size_after / (1024*1024*1024):.2f} GB")
    print(f"Compression ratio: {compression_ratio:.1f}%")
    print(f"Space saved: {(total_size_before - total_size_after) / (1024*1024*1024):.2f} GB")
    print(f"Time taken: {time.time() - start_time:.1f} seconds")

def main():
    print("üöÄ N√âN ·∫¢NH SI√äU M·∫†NH ƒê·ªÇ GI·∫¢M DUNG L∆Ø·ª¢NG T·ªêI ƒêA")
    print("=" * 60)
    
    # D·ªçn d·∫πp file t·∫°m tr∆∞·ªõc
    cleanup_temp_files()
    
    # N√©n extracted_data v·ªõi c√†i ƒë·∫∑t si√™u m·∫°nh
    print("\nüìÅ N√©n extracted_data...")
    compress_directory_aggressive("extracted_data", quality=40, max_size=(1280, 720))
    
    print("\nüéâ HO√ÄN TH√ÄNH N√âN SI√äU M·∫†NH!")
    print("Dung l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c gi·∫£m t·ªëi ƒëa ƒë·ªÉ t√≠ch h·ª£p ƒë·ªß data m·ªõi.")

if __name__ == "__main__":
    main()
