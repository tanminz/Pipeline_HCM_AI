#!/usr/bin/env python3
"""
Test Vietnamese Translation System
"""

import requests
import json

def test_translation_api():
    """Test the translation API endpoint"""
    base_url = "http://localhost:5000"
    
    # Test cases based on user feedback
    test_queries = [
        "con ch√≥",
        "xe h∆°i", 
        "ph·ª• n·ªØ ƒë·ªôi n√≥n l√°",
        "con l√¢n v√†ng m√°u",
        "m√°y bay",
        "t√†u th·ªßy",
        "con tr√¢u",
        "con b√≤",
        "ng∆∞·ªùi ƒë√†n √¥ng",
        "tr·∫ª em",
        "c√¢y c·ªëi",
        "hoa ƒë·∫πp",
        "n√∫i cao",
        "bi·ªÉn xanh",
        "th√†nh ph·ªë",
        "n√¥ng th√¥n",
        "nh√† c·ª≠a",
        "ƒë∆∞·ªùng ph·ªë",
        "c√¥ng vi√™n",
        "ch·ª£ ƒë√¥ng ng∆∞·ªùi"
    ]
    
    print("üß™ Testing Vietnamese Translation System")
    print("=" * 50)
    
    for query in test_queries:
        try:
            # Test translation endpoint
            response = requests.get(f"{base_url}/api/translate_test", params={'q': query})
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Query: '{query}'")
                print(f"   Translated: '{data.get('translated_query', 'N/A')}'")
                print(f"   Suggestions: {data.get('suggestions', [])}")
                print(f"   Translator: {data.get('translator', 'N/A')}")
                
                # Show analysis if available
                if 'analysis' in data:
                    analysis = data['analysis']
                    if 'components' in analysis:
                        components = analysis['components']
                        print(f"   Components:")
                        for comp_type, items in components.items():
                            if items:
                                print(f"     {comp_type}: {items}")
                
                print()
            else:
                print(f"‚ùå Query: '{query}' - HTTP {response.status_code}")
                print()
                
        except Exception as e:
            print(f"‚ùå Query: '{query}' - Error: {e}")
            print()

def test_search_with_translation():
    """Test search with translation"""
    base_url = "http://localhost:5000"
    
    # Test specific cases mentioned by user
    test_queries = [
        "con ch√≥",
        "xe h∆°i",
        "ph·ª• n·ªØ ƒë·ªôi n√≥n l√°", 
        "con l√¢n v√†ng m√°u"
    ]
    
    print("üîç Testing Search with Translation")
    print("=" * 50)
    
    for query in test_queries:
        try:
            response = requests.get(f"{base_url}/api/search_with_translation", params={'q': query, 'k': 10})
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Query: '{query}'")
                print(f"   Translated: '{data.get('translation_info', {}).get('translated', 'N/A')}'")
                print(f"   Results: {data.get('count', 0)} found")
                
                # Show first few results
                results = data.get('results', [])
                if results:
                    print(f"   Top results:")
                    for i, result in enumerate(results[:3]):
                        print(f"     {i+1}. {result.get('filename', 'N/A')} (similarity: {result.get('similarity', 0):.3f})")
                
                print()
            else:
                print(f"‚ùå Query: '{query}' - HTTP {response.status_code}")
                print()
                
        except Exception as e:
            print(f"‚ùå Query: '{query}' - Error: {e}")
            print()

def test_enhanced_translator_directly():
    """Test the enhanced translator directly"""
    try:
        from enhanced_vietnamese_translator import translate_vietnamese_query, get_query_suggestions, analyze_vietnamese_query
        
        print("üîß Testing Enhanced Translator Directly")
        print("=" * 50)
        
        test_queries = [
            "con ch√≥",
            "xe h∆°i",
            "ph·ª• n·ªØ ƒë·ªôi n√≥n l√°",
            "con l√¢n v√†ng m√°u",
            "m√°y bay tr·∫Øng",
            "t√†u th·ªßy l·ªõn",
            "con tr√¢u ƒëen",
            "ng∆∞·ªùi ƒë√†n √¥ng m·∫∑c √°o",
            "c√¢y c·ªëi xanh t∆∞∆°i",
            "hoa ƒë·∫πp m√†u h·ªìng"
        ]
        
        for query in test_queries:
            translated = translate_vietnamese_query(query)
            suggestions = get_query_suggestions(query)
            analysis = analyze_vietnamese_query(query)
            
            print(f"‚úÖ Query: '{query}'")
            print(f"   Translated: '{translated}'")
            print(f"   Suggestions: {suggestions}")
            
            if analysis['components']:
                print(f"   Components:")
                for comp_type, items in analysis['components'].items():
                    if items:
                        print(f"     {comp_type}: {items}")
            
            print()
            
    except ImportError as e:
        print(f"‚ùå Enhanced translator not available: {e}")
    except Exception as e:
        print(f"‚ùå Error testing enhanced translator: {e}")

if __name__ == "__main__":
    print("üöÄ Starting Vietnamese Translation Tests")
    print()
    
    # Test enhanced translator directly first
    test_enhanced_translator_directly()
    
    # Test API endpoints if server is running
    try:
        test_translation_api()
        test_search_with_translation()
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  Server not running. Start the Flask app first with: python app.py")
    except Exception as e:
        print(f"‚ùå Error testing API: {e}")
    
    print("‚úÖ Translation tests completed!")



